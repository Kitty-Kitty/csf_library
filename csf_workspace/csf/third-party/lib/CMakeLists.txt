#select third-party library

#set arm directory
SET(CSF_THIRD_PARTY_LIB_ARM_FLAG "arm")
SET(CSF_THIRD_PARTY_LIB_LIB_FLAG "lib")
SET(CSF_THIRD_PARTY_LIB_PATH "")

#判断CMAKE_C_COMPILER是否为"arm-",表示是否需要进入arm目录
#STRING(LENGTH "${CSF_THIRD_PARTY_PLATFORM_NAME}" RETURN_PLATFORM_STRING_LENGTH)
#STRING(FIND "${CSF_THIRD_PARTY_PLATFORM_NAME}" "${CSF_THIRD_PARTY_LIB_ARM_FLAG}" RETURN_VARIABLE)
STRING(FIND "${CMAKE_C_COMPILER}" "${CSF_THIRD_PARTY_LIB_ARM_FLAG}" RETURN_VARIABLE)
IF(RETURN_VARIABLE EQUAL 0)
  SET(CSF_THIRD_PARTY_LIB_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${CSF_THIRD_PARTY_LIB_ARM_FLAG}/${PLATFORM}")
  #RETURN()
ENDIF()


#处理x86平台的环境
IF(CSF_PLATFORM STREQUAL "x86")

  #通过执行"g++ -dumpmachine" 来解决目录处理器的类型为i686还是x86_64类型
  EXECUTE_PROCESS(
	COMMAND ${CMAKE_CXX_COMPILER} -dumpmachine
	COMMAND grep "x86_64"
	OUTPUT_VARIABLE COMPILER_DUMP_MACHINE_X64
	OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  
  #如果是64位，则到x64目录中
  IF( COMPILER_DUMP_MACHINE_X64 )
	SET(CSF_THIRD_PARTY_LIB_PATH "${CMAKE_CURRENT_SOURCE_DIR}/linux-x64")
  ELSE()
	SET(CSF_THIRD_PARTY_LIB_PATH "${CMAKE_CURRENT_SOURCE_DIR}/linux-i686")
  ENDIF( COMPILER_DUMP_MACHINE_X64 )

ENDIF(CSF_PLATFORM STREQUAL "x86")

#进行${CSF_THIRD_PARTY_LIB_PATH}指定的目录，加载第三方库内容
IF( CSF_THIRD_PARTY_LIB_PATH STREQUAL "")
  MESSAGE(WARNING "platform[ ${CSF_PLATFORM} ] not used third-party[ null ].")
  RETURN()
ELSE()
  if(IS_DIRECTORY ${CSF_THIRD_PARTY_LIB_PATH})
	MESSAGE(STATUS "platform[ ${CSF_PLATFORM} ] used third-party[ ${CSF_THIRD_PARTY_LIB_PATH} ].")
	#更新平台使用第三方库目录根地址
	SET(CSF_THIRD_PARTY_ROOT_DIR ${CSF_THIRD_PARTY_LIB_PATH} PARENT_SCOPE)
	#进入第三方库目录处理
	ADD_SUBDIRECTORY(${CSF_THIRD_PARTY_LIB_PATH})

	#add include dir
	SET(CSF_INCLUDE_DIR	${CSF_INCLUDE_DIR} PARENT_SCOPE)
	#add lib dir
	SET(CSF_LIBRARY_DIR ${CSF_LIBRARY_DIR} PARENT_SCOPE)

  ELSE()
	MESSAGE(FATAL_ERROR "platform[ ${CSF_PLATFORM} ] not found third-party[ ${CSF_THIRD_PARTY_LIB_PATH} ].")
	MESSAGE(FATAL_ERROR "directory third-party[ ${CSF_THIRD_PARTY_LIB_PATH} ] is null.")
  ENDIF()

  RETURN()
ENDIF()

#处理其他平台第三方库

MESSAGE(STATUS "RETURN_VARIABLE = ${RETURN_VARIABLE}")



#add include dir
SET(CSF_INCLUDE_DIR	${CSF_INCLUDE_DIR} PARENT_SCOPE)
#add lib dir
SET(CSF_LIBRARY_DIR ${CSF_LIBRARY_DIR} PARENT_SCOPE)
