#set library list
SET(CSF_THIRD_PARTY_LIBRARIES_LIST "")

#set library archive type
SET(CSF_THIRD_PARTY_LIBRARIES_ARCHIVE_PLATFORM "linux-x64")
SET(CSF_THIRD_PARTY_LIBRARIES_ARCHIVE_TYPE "tar.xz")

#根据第三方库数量，判断是否为所有库
LIST(LENGTH CSF_THIRD_PARTY_LIBRARIES_LIST RETURN_LIST_LENGTH)
IF(RETURN_LIST_LENGTH EQUAL 0)
	MESSAGE(STATUS "platform[ ${CSF_PLATFORM} ] used whole libraries.")
	EXECUTE_PROCESS(
		COMMAND find ${CMAKE_CURRENT_SOURCE_DIR} -mindepth 1 -maxdepth 1 -name "*${CSF_THIRD_PARTY_LIBRARIES_ARCHIVE_TYPE}" -type f -printf "%f;"
		OUTPUT_VARIABLE CSF_THIRD_PARTY_LIBRARIES_LIST
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
ENDIF()

#打印所有第三方库
MESSAGE(STATUS "")
LIST(LENGTH CSF_THIRD_PARTY_LIBRARIES_LIST RETURN_LIST_LENGTH)
IF(RETURN_LIST_LENGTH GREATER 0)
	MATH(EXPR RETURN_LIST_LENGTH "${RETURN_LIST_LENGTH}-1")
	MESSAGE(STATUS "platform[ ${CSF_PLATFORM} ] libraries[ ${RETURN_LIST_LENGTH} ]:")
	MESSAGE(STATUS "--------------------------------------------------------------")
	SET(TMP_LIBRARY_COUNT 0)
	FOREACH(tmp_library ${CSF_THIRD_PARTY_LIBRARIES_LIST})
		MATH(EXPR TMP_LIBRARY_COUNT "${TMP_LIBRARY_COUNT}+1")
		MESSAGE(STATUS "[${TMP_LIBRARY_COUNT}/${RETURN_LIST_LENGTH}] ${tmp_library}")
	ENDFOREACH(tmp_library)
	MESSAGE(STATUS "--------------------------------------------------------------")
ELSE()
	MESSAGE(STATUS "platform[ ${CSF_PLATFORM} ] libraries[ ${RETURN_LIST_LENGTH} ]:")
ENDIF()
MESSAGE(STATUS "")

#设置*.sh文件的可执行文件的执行权限
EXECUTE_PROCESS(
		COMMAND find ${CMAKE_CURRENT_SOURCE_DIR} -mindepth 1 -maxdepth 1 -name "*.sh" -type f -exec chmod +x {} \;
		OUTPUT_VARIABLE RETURN_THIRD_PARTY_LIBRARIES_SHELL_FILE
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)



#添加include和lib目录地址
EXECUTE_PROCESS(
	COMMAND find ${CMAKE_CURRENT_SOURCE_DIR} -mindepth 1 -maxdepth 2 -type d -printf "%p;"
	OUTPUT_VARIABLE CSF_THIRD_PARTY_LIBRARIES_PATH_LIST
	OUTPUT_STRIP_TRAILING_WHITESPACE
)
MESSAGE(STATUS "")
LIST(LENGTH CSF_THIRD_PARTY_LIBRARIES_PATH_LIST RETURN_LIST_LENGTH)
IF(RETURN_LIST_LENGTH GREATER 0)
	MATH(EXPR RETURN_LIST_LENGTH "${RETURN_LIST_LENGTH}-1")
	MESSAGE(STATUS "platform[ ${CSF_PLATFORM} ] add library directorys[ ${RETURN_LIST_LENGTH} ]:")
	MESSAGE(STATUS "include[ I ] | library[ L ]")
	MESSAGE(STATUS "--------------------------------------------------------------")

	SET(TMP_LIBRARY_COUNT 0)
	SET(TMP_LIBRARY_STRING_FLAG "lib")
	STRING(LENGTH "${TMP_LIBRARY_STRING_FLAG}" RETURN_TMP_LIBRARY_STRING_FLAG_LENGTH)

	FOREACH(tmp_library ${CSF_THIRD_PARTY_LIBRARIES_PATH_LIST})
		MATH(EXPR TMP_LIBRARY_COUNT "${TMP_LIBRARY_COUNT}+1")
		STRING(LENGTH "${tmp_library}" RETURN_TMP_STRING_LENGTH)
		MATH(EXPR TMP_LIBRARY_SUBSTR_INDEX "${RETURN_TMP_STRING_LENGTH}-${RETURN_TMP_LIBRARY_STRING_FLAG_LENGTH}")
		#STRING(FIND "${tmp_library}" "/lib" RETURN_VARIABLE)
		STRING(SUBSTRING "${tmp_library}" ${TMP_LIBRARY_SUBSTR_INDEX} ${RETURN_TMP_LIBRARY_STRING_FLAG_LENGTH} RETURN_TMP_SUBSTR_STRING)

		#IF(RETURN_VARIABLE EQUAL 0)
		IF(${RETURN_TMP_SUBSTR_STRING} STREQUAL ${TMP_LIBRARY_STRING_FLAG})
			MESSAGE(STATUS "[${TMP_LIBRARY_COUNT}/${RETURN_LIST_LENGTH}] [ L ] ${tmp_library}")
			#LINK_DIRECTORIES(${tmp_library})
			SET(CSF_LIBRARY_DIR ${CSF_LIBRARY_DIR} ${tmp_library})
		ELSE()
			MESSAGE(STATUS "[${TMP_LIBRARY_COUNT}/${RETURN_LIST_LENGTH}] [ I ] ${tmp_library}")
			#INCLUDE_DIRECTORIES(${tmp_library})
			SET(CSF_INCLUDE_DIR	${CSF_INCLUDE_DIR} ${tmp_library})
		ENDIF()
		
	ENDFOREACH(tmp_library)
	MESSAGE(STATUS "--------------------------------------------------------------")
ELSE()
	MESSAGE(STATUS "platform[ ${CSF_PLATFORM} ] libraries[ ${RETURN_LIST_LENGTH} ]:")
ENDIF()
MESSAGE(STATUS "")

#add include dir
SET(CSF_INCLUDE_DIR	${CSF_INCLUDE_DIR} PARENT_SCOPE)
#add lib dir
SET(CSF_LIBRARY_DIR ${CSF_LIBRARY_DIR} PARENT_SCOPE)

#将第三方库信息组织成信息结构体
#SET(CSF_THIRD_PARTY_LIBRARIES_INFORMATION
#	 "source_path=${CSF_THIRD_PARTY_ROOT_DIR}&"
#	 "destination_path=${CSF_THIRD_PARTY_ROOT_DIR}&"
#	 "archive_type=${CSF_THIRD_PARTY_LIBRARIES_ARCHIVE_TYPE}&"
#	 "archive_platform=${CSF_THIRD_PARTY_LIBRARIES_ARCHIVE_PLATFORM}&"
#	 "libraries=${CSF_THIRD_PARTY_LIBRARIES_LIST}&"
#   )

#EXECUTE_PROCESS(
#	COMMAND find ${CMAKE_CURRENT_SOURCE_DIR} -mindepth 1 -maxdepth 1 -name "*${CSF_THIRD_PARTY_LIBRARIES_ARCHIVE_TYPE}" -type f -printf "%f;"
#	OUTPUT_VARIABLE CSF_THIRD_PARTY_LIBRARIES_LIST
#	OUTPUT_STRIP_TRAILING_WHITESPACE
#)