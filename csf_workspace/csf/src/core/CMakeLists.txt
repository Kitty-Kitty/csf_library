
#add src source
AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} CSF_SRC_FILES_LIST)

#get source in all sub directories
ALL_SOURCE_DIRECTORY_LIST(SUB_SRC_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR})

#MESSAGE(STATUS "build library SRC_DIR:[${CMAKE_CURRENT_SOURCE_DIR}]")
#MESSAGE(STATUS "build library SUB_SRC_DIRECTORIES:[${SUB_SRC_DIRECTORIES}]")


FOREACH(SUB_SRC_DIRECTORY ${SUB_SRC_DIRECTORIES})
  #MESSAGE(STATUS "into directory:[${SUB_SRC_DIRECTORY}]")
  ADD_SUBDIRECTORY(${SUB_SRC_DIRECTORY})
ENDFOREACH()


#MESSAGE(STATUS "build library CSF_SRC_FILES_LIST:[${CSF_SRC_FILES_LIST}]")


#make libcsf
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lpthread  -ldl -lrt -lc")
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lpthread -ldl -lrt -lc")

#make csf.lib
SET(LIBRARY_OUTPUT_PATH ${CSF_PROJECT_OUTPUT_TOP_DIR}/${CSF_PROJECT_NAME})


ADD_LIBRARY (CSF_PROJECT_LIBRARY_SOURCES OBJECT ${CSF_SRC_FILES_LIST})
ADD_LIBRARY(${CSF_PROJECT_LIBRARY_SHARED_NAME} SHARED $<TARGET_OBJECTS:CSF_PROJECT_LIBRARY_SOURCES>)
ADD_LIBRARY(${CSF_PROJECT_LIBRARY_STATIC_NAME} STATIC $<TARGET_OBJECTS:CSF_PROJECT_LIBRARY_SOURCES>)


SET(CSF_PROJECT_TARGET_LINK_LIBRARIES
	
)

TARGET_LINK_LIBRARIES(${CSF_PROJECT_LIBRARY_SHARED_NAME}
		${CSF_PROJECT_TARGET_LINK_LIBRARIES}
	)
	
TARGET_LINK_LIBRARIES(${CSF_PROJECT_LIBRARY_STATIC_NAME}
		${CSF_PROJECT_TARGET_LINK_LIBRARIES}
	)
	

# 按照一般的习惯，静态库名字跟动态库名字应该是一致的，只是扩展名不同；
SET_TARGET_PROPERTIES(${CSF_PROJECT_LIBRARY_STATIC_NAME} PROPERTIES OUTPUT_NAME ${CSF_PROJECT_NAME})
SET_TARGET_PROPERTIES(${CSF_PROJECT_LIBRARY_SHARED_NAME} PROPERTIES OUTPUT_NAME ${CSF_PROJECT_NAME})


# cmake在构建一个新的target时，会尝试清理掉其他使用这个名字的库，
# 因此，在构建libhello.a时，就会清理掉libhello.so.
# 为了回避这个问题，比如再次使用SET_TARGET_PROPERTIES定义 CLEAN_DIRECT_OUTPUT属性。
SET_TARGET_PROPERTIES (${CSF_PROJECT_LIBRARY_STATIC_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES (${CSF_PROJECT_LIBRARY_SHARED_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)


# 按照规则，动态库是应该包含一个版本号的，
# VERSION指代动态库版本，SOVERSION指代API版本。
STRING(SUBSTRING ${CSF_PROJECT_LIBRARY_VERSION} 0 1 CSF_PROJECT_LIBRARY_VERSION_MAJOR)
SET_TARGET_PROPERTIES (${CSF_PROJECT_LIBRARY_STATIC_NAME} PROPERTIES VERSION ${CSF_PROJECT_LIBRARY_VERSION} SOVERSION ${CSF_PROJECT_LIBRARY_VERSION_MAJOR})
SET_TARGET_PROPERTIES (${CSF_PROJECT_LIBRARY_SHARED_NAME} PROPERTIES VERSION ${CSF_PROJECT_LIBRARY_VERSION} SOVERSION ${CSF_PROJECT_LIBRARY_VERSION_MAJOR})


#SET_TARGET_PROPERTIES(${CSF_PROJECT_LIBRARY_STATIC_NAME} PROPERTIES OUTPUT_NAME ${CSF_PROJECT_NAME})
#SET_TARGET_PROPERTIES(${CSF_PROJECT_LIBRARY_SHARED_NAME} PROPERTIES OUTPUT_NAME ${CSF_PROJECT_NAME})
#SET_TARGET_PROPERTIES(${CSF_PROJECT_LIBRARY_STATIC_NAME} PROPERTIES OUTPUT_NAME ${CSF_PROJECT_LIBRARY_RELEASE_NAME})
#SET_TARGET_PROPERTIES(${CSF_PROJECT_LIBRARY_SHARED_NAME} PROPERTIES OUTPUT_NAME ${CSF_PROJECT_LIBRARY_RELEASE_NAME})


MESSAGE(STATUS "shared library:[${CSF_PROJECT_LIBRARY_SHARED_NAME}]")
MESSAGE(STATUS "static library:[${CSF_PROJECT_LIBRARY_STATIC_NAME}]")
MESSAGE(STATUS "build library:[${CSF_PROJECT_NAME}]")